Objetivo Principal:
Reparar y asegurar al 100% los sistemas de login, registro, recuperaci√≥n de contrase√±a, edici√≥n de configuraci√≥n y gesti√≥n de cuenta, manteniendo la API existente de Flask, la base de datos MySQL, los puertos actuales y el workflow de Replit. No finalizar hasta que todo funcione correctamente y est√© auditado contra vulnerabilidades.

Instrucciones Espec√≠ficas:

An√°lisis Inicial (Paso 1):

Revisa el c√≥digo actual de:

Autenticaci√≥n (login/logout).

Registro de usuarios (validaci√≥n de email/contrase√±a).

Recuperaci√≥n de contrase√±a (tokens, enlaces temporales).

Edici√≥n de cuenta (actualizaci√≥n de datos sensibles).

Identifica vulnerabilidades (SQL injection, XSS, CSRF, falta de hash en contrase√±as, sesiones inseguras, falta de rate-limiting, etc.).

No eliminar ni reescribir c√≥digo: Optimiza lo existente.

Parches Prioritarios (Paso 2):

Contrase√±as:

Usa bcrypt o Werkzeug para hashing (nunca almacenar en texto plano).

Exige contrase√±as complejas (m√≠nimo 12 caracteres, s√≠mbolos, n√∫meros).

Sesiones:

Configura cookies con Secure, HttpOnly, SameSite=Strict.

Usa claves secretas robustas y renovables.

SQL:

Aplica prepared statements en todas las queries a MySQL.

Revoca permisos innecesarios en la base de datos.

Tokens de Recuperaci√≥n:

Genera tokens √∫nicos y con expiraci√≥n (ej: 15 minutos).

Valida tokens contra la base de datos antes de permitir cambios.

Protecci√≥n Contra Ataques (Paso 3):

Implementa:

CSRF tokens en formularios (usa Flask-WTF).

Rate-limiting en login/recuperaci√≥n (ej: 5 intentos por IP/minuto).

Sanitizaci√≥n de inputs contra XSS (ej: bleach o markupsafe).

Headers de seguridad (CSP, HSTS, X-Content-Type).

Verificaci√≥n y Testing (Paso 4):

Ejecuta pruebas manuales/Automatizadas para:

Flujo completo de registro ‚Üí login ‚Üí recuperaci√≥n ‚Üí edici√≥n.

Intentos de inyecci√≥n SQL/XSS en formularios.

Robustez de sesiones (¬øSe invalidan al cerrar sesi√≥n?).

Si falla una prueba:

Corrige el error espec√≠fico.
‚Üí Vuelve al Paso 2 y repite hasta 0 fallos.

Requisitos Estrictos:

‚úÖ Mant√©n la estructura de carpetas y archivos de Replit.

‚úÖ Usa solo la API de Flask y MySQL existentes (sin nuevas dependencias a menos que sean cr√≠ticas para seguridad).

‚úÖ Documenta cada cambio en el c√≥digo con comentarios (ej: # FIX: SQLi en query de login).

Estructura de Respuesta Esperada:

[Paso 1] Analizando m√≥dulo de login...  
  - Vulnerabilidad detectada: Contrase√±as en texto plano.  
[Paso 2] Aplicando parche: bcrypt implementado en UserModel.  
[Paso 4] Test: Verificaci√≥n de hash... ‚úÖ  
[Paso 2] Error: Token de recuperaci√≥n no expira.  
  - Correcci√≥n: A√±adido campo 'expiraci√≥n' en MySQL.  
[Paso 4] Test: Token expirado rechazado... ‚úÖ  
...  
[Resultado Final] Todos los m√≥dulos seguros y funcionales. üõ°Ô∏è  
No detenerse hasta que todos los pasos est√©n marcados con ‚úÖ.

Nota: Si hay incertidumbre en alg√∫n paso, pregunta antes de modificar c√≥digo cr√≠tico. Prioriza soluciones probadas en Flask (ej: usar Flask-Security para funcionalidades avanzadas).