Objetivo Enfocado:
Reparar √∫nicamente los m√≥dulos de login, registro y recuperaci√≥n de contrase√±a hasta que todos los procedimientos devuelvan respuestas positivas en la consola de Replit (200 OK + logs verificados). No avanzar a otros m√≥dulos hasta que estas 3 funciones est√©n 100% operativas y seguras.

Acciones Clave (En Este Orden):

Testeo en Tiempo Real (Simulaci√≥n de Usuario):

Ejecuta scripts de prueba que simulen:

Registro: Enviar POST a /register con email v√°lido, contrase√±a segura (>12 caracteres).

‚úÖ Esperar: 201 Created + usuario en MySQL + email de verificaci√≥n enviado (log en consola).

Login: POST a /login con credenciales del usuario creado.

‚úÖ Esperar: 200 OK + cookie de sesi√≥n segura (HttpOnly, Secure).

Recuperaci√≥n: POST a /recovery con email registrado.

‚úÖ Esperar: 200 OK + token temporal en MySQL + email con enlace (log en consola).

Reset de Contrase√±a: POST a /reset-password con token v√°lido y nueva contrase√±a.

‚úÖ Esperar: 200 OK + hash actualizado en MySQL + email de confirmaci√≥n.

Bucle de Correcci√≥n de Errores:

Si alg√∫n test falla:

Paso 1: Identificar el error exacto (ej: ERROR 500: Internal Server Error en /register).

Paso 2: Corregir el c√≥digo (ej: solucionar excepci√≥n en validaci√≥n de email).

Paso 3: Volver a ejecutar solo el test fallido hasta que funcione.

Repetir hasta que todos los tests se ejecuten en secuencia sin errores.

Verificaci√≥n de Seguridad Adicional:

Aunque el test funcione, revisar:

¬øLas contrase√±as se almacenan como hash? (No permitir texto plano).

¬øLos tokens de recuperaci√≥n expiran despu√©s de 15 minutos? (DELETE FROM tokens WHERE created_at < NOW() - INTERVAL 15 MINUTE).

¬øHay logs detallados en consola? (ej: [REGISTRO] Usuario user@example.com creado | [LOGIN] Sesi√≥n iniciada desde IP 192.0.2.1).

Estructura de Respuesta Obligatoria:

[REGISTRO] Probando /register...  
  - POST: email="test@example.com", password="A1@abcdefghijk"  
  - ERROR: 500 (falta columna 'verified' en MySQL).  
  - CORRECCI√ìN: ALTER TABLE users ADD COLUMN verified BOOLEAN DEFAULT FALSE;  
  - RETEST: ‚úÖ 201 Created | Usuario en DB | Email enviado.  

[LOGIN] Probando /login...  
  - POST: email="test@example.com", password="A1@abcdefghijk"  
  - ERROR: 403 (cuenta no verificada).  
  - CORRECCI√ìN: A√±adir redirect a /verify-email despu√©s del registro.  
  - RETEST: ‚úÖ 200 OK | Cookie de sesi√≥n generada.  

[RECOVERY] Probando /recovery...  
  - POST: email="test@example.com"  
  - ‚úÖ 200 OK | Token almacenado | Email enviado.  

[RESET] Probando /reset-password...  
  - POST: token="abc123", new_password="B2@lmnopqrstuv"  
  - ‚úÖ 200 OK | Hash actualizado | Email de confirmaci√≥n.  
Reglas Estrictas:

No usar respuestas gen√©ricas: Cada error debe mostrar el c√≥digo exacto afectado (archivo + l√≠nea).

Priorizar funcionalidad sobre optimizaci√≥n: Asegurar que el flujo b√°sico funcione antes de refactorizar.

Mantener logs legibles: Usar prefijos como [SECURITY] o [DATABASE] para filtrar en consola.

No detenerse hasta que:

Todos los endpoints respondan con c√≥digos HTTP correctos (2xx).

La consola muestre confirmaci√≥n expl√≠cita de cada paso (creaci√≥n de usuario, env√≠o de emails, actualizaci√≥n de contrase√±a).

La auditor√≠a de seguridad no reporte vulnerabilidades cr√≠ticas.

¬°Empieza con el primer test de /register! üõ†Ô∏è

